<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/css3%20%E7%AC%94%E8%AE%B0/CSS3%20Markdown/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/css3%20%E7%AC%94%E8%AE%B0/CSS3%20Markdown/</url>
      <content type="html"><![CDATA[<h1 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h1><blockquote><h3 id="规定段落中的文本不进行换行"><a href="#规定段落中的文本不进行换行" class="headerlink" title="规定段落中的文本不进行换行"></a>规定段落中的文本不进行换行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">    white-space: nowrap // 规定段落中的文本不进行换行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="css-0-5px-一个边框"><a href="#css-0-5px-一个边框" class="headerlink" title="css 0.5px 一个边框"></a>css 0.5px 一个边框</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;border&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> .border &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">  &#125;</span><br><span class="line"> .border::after &#123;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: -50%;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    width: 200%;</span><br><span class="line">    border-bottom: 1px solid red;</span><br><span class="line">    transform: scale(0.5);</span><br><span class="line">    -webkit-transform: scale(0.5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="css-0-5px-四边边框"><a href="#css-0-5px-四边边框" class="headerlink" title="css 0.5px 四边边框"></a>css 0.5px 四边边框</h3></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;border&quot;&gt;&lt;/div&gt;</span><br><span class="line"> .border&#123;</span><br><span class="line">    position:relative;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> .border:after&#123;</span><br><span class="line">    content: &quot;  &quot;;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    z-index:-1;</span><br><span class="line">    width: 200%;</span><br><span class="line">    height:200%;</span><br><span class="line">    border:1px solid #e0e0e0;</span><br><span class="line">    -webkit-transform-origin: 0 0;</span><br><span class="line">    transform-origin: 0 0;</span><br><span class="line">    -webkit-transform: scale(.5, .5);</span><br><span class="line">    transform: scale(.5, .5);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%97%A0%E6%A0%87%E9%A2%98Markdown/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%97%A0%E6%A0%87%E9%A2%98Markdown/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="1-nul-和-undefined的区别"><a href="#1-nul-和-undefined的区别" class="headerlink" title="1.nul 和 undefined的区别"></a>1.nul 和 undefined的区别</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">    typeof null  //  object</span><br><span class="line">    typeof undefined // undefined</span><br><span class="line">    </span><br><span class="line">2.  null 表示一个值为空</span><br><span class="line">    undefined  表示未定义</span><br></pre></td></tr></table></figure><blockquote><h1 id="parseInt-parseFloat"><a href="#parseInt-parseFloat" class="headerlink" title="parseInt() parseFloat()"></a>parseInt() parseFloat()</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/ES6%20%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/ES6%20%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="1-数组去重"><a href="#1-数组去重" class="headerlink" title="1.数组去重"></a>1.数组去重</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4,3,4,2,5,6,7];</span><br><span class="line"> [... new Set(arr)]   //  [1, 2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure><blockquote><h1 id="2-交换变量值"><a href="#2-交换变量值" class="headerlink" title="2.交换变量值"></a>2.交换变量值</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let [x, y] = [1, 2];</span><br><span class="line">    [x, y] = [y, x];</span><br><span class="line">    console.log(x);  // 2</span><br><span class="line">    console.log(y);  // 1</span><br></pre></td></tr></table></figure><blockquote><h1 id="3-获取字符串中的某个字符"><a href="#3-获取字符串中的某个字符" class="headerlink" title="3.获取字符串中的某个字符"></a>3.获取字符串中的某个字符</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let str = &apos;hello world&apos;;</span><br><span class="line">  console.log(str[1]);  //  e</span><br></pre></td></tr></table></figure><blockquote><h1 id="4-…扩展符"><a href="#4-…扩展符" class="headerlink" title="4. …扩展符"></a>4. …扩展符</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr1 = [1,2,3,4];</span><br><span class="line">let arr2 = [5,6,7,8];</span><br><span class="line">let arr3 = [9,0];</span><br><span class="line">[...arr1, ...arr2, ...arr3] // [1,2,3,4,5,6,7,8,9,0]</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/async%20await%20%E7%90%86%E8%A7%A3/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/async%20await%20%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<blockquote><h2 id="async-await-使用注意事项"><a href="#async-await-使用注意事项" class="headerlink" title="async await 使用注意事项"></a>async await 使用注意事项</h2></blockquote><blockquote><p>在async函数中, 多个await命令后的异步操作是继发状态(异步操作之间同步执行)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">var time1 = function (ms) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;time1打印&apos;)</span><br><span class="line">            resolve(&apos;time1打印，resolve函数&apos;)</span><br><span class="line">        &#125;, ms)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var time2 = function (ms) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&apos;time2打印&apos;)</span><br><span class="line">            resolve(&apos;time2打印，resolve函数&apos;)</span><br><span class="line">        &#125;, ms)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function as () &#123;</span><br><span class="line">    await time1(2000)   </span><br><span class="line">    await time2(2000)  </span><br><span class="line">&#125;</span><br><span class="line">as()  //  继发状态  先执行time1 2秒后再执行 time2</span><br><span class="line"></span><br><span class="line">time1(1000).then((s) =&gt; &#123;console.log(s)&#125;) //  &apos;time1打印&apos; &apos;time1打印，resolve函数&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="数组Api"><a href="#数组Api" class="headerlink" title="数组Api"></a>数组Api</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4]</span><br><span class="line">Array.isArray(arr)   //  true    判断是否为数组</span><br><span class="line">arr.toString()  //  &apos;1,2,3,4&apos;   将数组转换为字符串</span><br><span class="line">arr.join(&apos;,&apos;)  //   &apos;1,2,3,4&apos;    将数组转换为字符串</span><br><span class="line">arr.push(5)  //   [1,2,3,4,5]     为数组推入一个值</span><br><span class="line">arr.pop()    //  [1,2,3]    弹出一个值</span><br><span class="line">arr.unshift(0)  //  [0,1,2,3,4]  从数组前面推入一个值</span><br><span class="line">arr.shift()  // [2,3,4]  从数组前面弹出一个值</span><br><span class="line">arr.sort()  //  上升重排序  但是需要加一个回调函数  arr.sort((a,b) =&gt; &#123;return a-b&#125;)</span><br><span class="line">arr.reverse()  //  倒序   [4,3,2,1]</span><br><span class="line">arr.concat([5,6,7], 8)  //  [1,2,3,4,5,6,7,8]  打散一个数组拼接到另外一个数组后面</span><br><span class="line"></span><br><span class="line"># arr.slice(start, end)   start 从何处开始选取  end 打哪里结束,不选默认到结尾 （含头不含尾）</span><br><span class="line">arr.slice(1,3) //  [2,3]  开始的下标到结束的下标  </span><br><span class="line"></span><br><span class="line">#arr.splice(index, howmany, item1....itemX)  index 从何处开始选取  howmany 删除的个数  item1....itemX 新添加的数据</span><br><span class="line">let arrDelete = arr.splice(0, 2, 11,12)  //  [11,12,3,4]  </span><br><span class="line">arrDelete //  [1,2]返回被删掉的数据</span><br><span class="line"></span><br><span class="line"># indexOf lastIndexOf   找到的话返回下标，没有找到返回-1 indexof()从开头找，lastIndexOf()从末尾开始找</span><br><span class="line">arr.indexOf(3)  // 2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组迭代方法</span><br><span class="line">every(): 对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。 (有点类似 &amp;&amp; 只有当所有的都满足条件的时候才会返回true)</span><br><span class="line">filter(): 返回由数组中满足条件的值组成的数组</span><br><span class="line">forEach(): 类似for循环,没有返回值</span><br><span class="line">map(): 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组.</span><br><span class="line">some()： 对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true。(有点类似 ||  只要有一个为true 则返回ture)</span><br><span class="line">reduce():</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/javascript%20%E8%BF%9B%E9%98%B6/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/javascript%20%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="1-map-方法-循环遍历"><a href="#1-map-方法-循环遍历" class="headerlink" title="1. map() 方法 (循环遍历)"></a>1. map() 方法 (循环遍历)</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">map() 返回新数组</span><br><span class="line">let arr = [1,2,3,4,5];</span><br><span class="line">let arr1 = arr.map(ls =&gt; &#123; return ls + &apos;px&apos;&#125;);</span><br><span class="line">console.log(arr1)  // [1px, 2px, 3px, 4px, 5px]</span><br></pre></td></tr></table></figure><blockquote><h1 id="2-filter-方法（过滤）"><a href="#2-filter-方法（过滤）" class="headerlink" title="2. filter() 方法（过滤）"></a>2. filter() 方法（过滤）</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter() 返回新数组</span><br><span class="line"></span><br><span class="line">let arr = [1,2,3,4,5];</span><br><span class="line">let arr1 = arr.filter(ls =&gt; &#123; return ls &gt; 3&#125;);</span><br><span class="line">console.log(arr1)  // [4,5]</span><br></pre></td></tr></table></figure><blockquote><h1 id="3-Object-assign-合并对象"><a href="#3-Object-assign-合并对象" class="headerlink" title="3. Object.assign() (合并对象)"></a>3. Object.assign() (合并对象)</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.assgin(target, ...sources)</span><br></pre></td></tr></table></figure><p>参数说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target: 目标对象,即返回值</span><br><span class="line">sources: 源对象,可以存在多个</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Object.assign() 只能算是浅拷贝</span><br><span class="line"></span><br><span class="line">let o1 = &#123;a: 1&#125;;</span><br><span class="line">let o2 = &#123;b: 2&#125;;</span><br><span class="line">let o3 = &#123;c: 3&#125;;</span><br><span class="line">let obj = Object.assign(&#123;&#125;, o1, o2, o3)  // &#123;a: 1, b: 2, c: 3&#125;</span><br><span class="line"></span><br><span class="line">let option1 = &#123;</span><br><span class="line">    name: &apos;Tom&apos;,</span><br><span class="line">    age: 20</span><br><span class="line">&#125;</span><br><span class="line">let option2 = &#123;</span><br><span class="line">    age: 19,</span><br><span class="line">    sex: &apos;man&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let option3 = Object.assign(&#123;&#125;, option1, option2)</span><br><span class="line">console.log(option3)  // &#123;name: &apos;Tom&apos;, age: 19, sex: &apos;man&apos;&#125;</span><br><span class="line">// 后面的对象的属性值会将前面对象的属性值覆盖，如果不存在的话就添加</span><br><span class="line"></span><br><span class="line">let option4 = Object.assign(option1, option2)</span><br><span class="line">console.log(option4) // &#123;name: &apos;Tom&apos;, age: 19, sex: &apos;man&apos;&#125;</span><br><span class="line">console.log(option1) // &#123;name: &apos;Tom&apos;, age: 19, sex: &apos;man&apos;&#125;</span><br><span class="line">// 一定要加&#123;&#125;，不然会改变 option1对象本身</span><br></pre></td></tr></table></figure><p>如有需要可以访问 <a href="https://blog.csdn.net/wang252949/article/details/79106160" target="_blank" rel="noopener">Object.assign详细用法</a></p><blockquote><h1 id="Object-defineProperty-为对象定义新属性或者修改原有的属性"><a href="#Object-defineProperty-为对象定义新属性或者修改原有的属性" class="headerlink" title="Object.defineProperty() 为对象定义新属性或者修改原有的属性"></a>Object.defineProperty() 为对象定义新属性或者修改原有的属性</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p>参数说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj: 必需， 目标对象</span><br><span class="line">prop: 必需，需定义或修改的属性名</span><br><span class="line">descriptor: 必需，目标属性所拥有的特性</span><br></pre></td></tr></table></figure></p><p>举例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj, &apos;name&apos;, &#123;</span><br><span class="line">    value: &apos;Tomr&apos;</span><br><span class="line">&#125;)</span><br><span class="line">obj.name // Tomr</span><br></pre></td></tr></table></figure></p><p>如有需要可以访问 <a href="https://segmentfault.com/a/1190000007434923" target="_blank" rel="noopener">Object.defineProperty详细用法</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/Promise/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/Promise/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="javascript-运行机制-（Promise面试题）"><a href="#javascript-运行机制-（Promise面试题）" class="headerlink" title="javascript 运行机制 （Promise面试题）"></a>javascript 运行机制 （Promise面试题）</h1></blockquote><blockquote><h3 id="先执行-宏观任务-：-setTimeout-会放到下一轮任务队列-，-new-Promise会立即执行-先输出-2，Promise的then-放入-微任务队列-，继续-宏观任务-输出-4-再执行-微任务队列-，输出-3，最后再输出1"><a href="#先执行-宏观任务-：-setTimeout-会放到下一轮任务队列-，-new-Promise会立即执行-先输出-2，Promise的then-放入-微任务队列-，继续-宏观任务-输出-4-再执行-微任务队列-，输出-3，最后再输出1" class="headerlink" title="先执行++宏观任务++： setTimeout 会放到下一轮任务队列 ， new Promise会立即执行,先输出 2，Promise的then 放入 ++微任务队列++，继续++宏观任务++, 输出 4, 再执行 ++微任务队列++ ，输出 3，最后再输出1"></a>先执行++宏观任务++： setTimeout 会放到下一轮任务队列 ， new Promise会立即执行,先输出 2，Promise的then 放入 ++微任务队列++，继续++宏观任务++, 输出 4, 再执行 ++微任务队列++ ，输出 3，最后再输出1</h3></blockquote><blockquote><p>setTimeout(fn, 0) 的含义是某个任务在主线程最早的空闲时间进行，即只要主线程执行栈内的同步任务全部执行完成，栈为空就立马执行</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(&apos;1&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve)&#123;</span><br><span class="line">    console.log(&apos;2&apos;);</span><br><span class="line">    for(var i = 0; i &lt; 10000; i++)&#123;</span><br><span class="line">        i == 99 &amp;&amp; resolve();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(function()&#123;</span><br><span class="line">    console.log(&apos;3&apos;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;4&apos;);</span><br><span class="line"></span><br><span class="line">//  2</span><br><span class="line">//  4</span><br><span class="line">//  3</span><br><span class="line">//  1</span><br></pre></td></tr></table></figure><blockquote><h2 id="进阶题"><a href="#进阶题" class="headerlink" title="进阶题"></a>进阶题</h2></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">const first = () =&gt; (new Promise((resolve,reject)=&gt;&#123;</span><br><span class="line">    console.log(3);</span><br><span class="line">    let p = new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">         console.log(7);</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">           console.log(5);</span><br><span class="line">           resolve(6); </span><br><span class="line">        &#125;,0)</span><br><span class="line">        resolve(1);</span><br><span class="line">    &#125;); </span><br><span class="line">    resolve(2);</span><br><span class="line">    p.then((arg)=&gt;&#123;</span><br><span class="line">        console.log(arg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">first().then((arg)=&gt;&#123;</span><br><span class="line">    console.log(arg);</span><br><span class="line">&#125;);</span><br><span class="line">console.log(4);</span><br><span class="line"></span><br><span class="line">输出顺序  3 7 4 1 2 5</span><br></pre></td></tr></table></figure><blockquote><h2 id="超级难题"><a href="#超级难题" class="headerlink" title="超级难题"></a>超级难题</h2></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">除了广义的同步任务和异步任务，我们对任务有更精细的定义：</span><br><span class="line"></span><br><span class="line">macro-task(宏任务)：包括整体代码script，setTimeout，setInterval</span><br><span class="line">micro-task(微任务)：Promise，process.nextTick</span><br><span class="line"></span><br><span class="line">process.nextTick 是 node.js 里的事件，用不到的同学可以暂时去掉 </span><br><span class="line"></span><br><span class="line">console.log(&apos;1&apos;);</span><br><span class="line"></span><br><span class="line">var time1 = setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;2&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;3&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;4&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;5&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">process.nextTick(function() &#123;</span><br><span class="line">    console.log(&apos;6&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&apos;7&apos;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&apos;8&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var time2 = setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;9&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;10&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;11&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;12&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> *****  Event Queue (事件队列)</span><br><span class="line">代码解析: </span><br><span class="line">1. 第一轮事件循环:</span><br><span class="line">    「1」整体script作为第一个宏任务进入主线程 遇到 console.log, 输出1，</span><br><span class="line">    「2」遇到 time1, 将其回调函数放入 宏任务Event Queue中, </span><br><span class="line">    「3」遇到 process.nextTick 放到微任务Event Queue中  //  暂名为process1</span><br><span class="line">    「4」遇到 new Promise 立即执行, 输出 7, 将then加入微任务Event Queue  //暂名为 then1</span><br><span class="line">    「5」遇到 time2 ,将其回调函数放入 宏任务 Event Queue中</span><br><span class="line">    「6」宏任务执行完, 发现两个微任务 process1，then1</span><br><span class="line">    「7」执行 process1, 输出 6</span><br><span class="line">    「8」执行 then1, 输出 8</span><br><span class="line">     // 第一轮事件循环完  输出 1 7 6 8</span><br><span class="line">2. 第二轮事件循环:</span><br><span class="line">    「1」栈中先执行 time1 ，先输出 2</span><br><span class="line">    「2」遇到process.nextTick 放入微任务Event Queue //暂名为 process2</span><br><span class="line">    「3」遇到 new Promise 立即执行, 输出 4 ,then放入微任务Event Queue // 暂名为 then2</span><br><span class="line">    「4」第二轮宏任务结束, 发现两个微任务 process2, then2</span><br><span class="line">    「5」执行 process2, 输出 3</span><br><span class="line">    「6」执行 then2， 输出 5</span><br><span class="line">    //  第二轮事件循环, 输出 2 4 3 5</span><br><span class="line">3. 第三轮事件循环: 跟第二轮事件循环一样</span><br><span class="line">    </span><br><span class="line">***** 整段代码共完成三次事件循环， 完整输出为 1 7 6 8 2 4 3 5 9 11 10 12</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/%E6%97%A0%E6%A0%87%E9%A2%98Markdown/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/%E6%97%A0%E6%A0%87%E9%A2%98Markdown/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="Math-方法"><a href="#Math-方法" class="headerlink" title="Math 方法"></a>Math 方法</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Math.abs();  //    取绝对值 </span><br><span class="line">   Math.abs(12);  //  12</span><br><span class="line">   Math.abs(-12);  // 12</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/cookie,%20sessionStorage,%20localStorage/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/cookie,%20sessionStorage,%20localStorage/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="cookie-sessionStorage-localStorage-区别及使用-都只在同一域名下有作用"><a href="#cookie-sessionStorage-localStorage-区别及使用-都只在同一域名下有作用" class="headerlink" title="cookie, sessionStorage, localStorage 区别及使用 (都只在同一域名下有作用)"></a>cookie, sessionStorage, localStorage 区别及使用 (都只在同一域名下有作用)</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cookie的构成: &apos;(cookie始终会在同源http请求中携带(即使不需要),在客户端和服务器间来回传递)&apos;</span><br><span class="line">  1.名称： cookie的名称，不区分大小写(不过在写的时候最好区分大小写)</span><br><span class="line">  2.值：   储存在cookie中的值</span><br><span class="line">  3.域:    cookie在那个域是有效的</span><br><span class="line">  4.路径:  指定域中的路径,向服务器发送cookie。&apos;例如设置 http://www.baidu.com/books/ 中才能访问,那么 http://www.baidu.com 就不会发送cookie信息，即使请求是来自同一个域&apos;</span><br><span class="line">  5.失效时间: 可以指定cookie被删除的时间戳  &apos;Thu May 17 2018 15:12:54&apos; (new Date() 生成的格式)</span><br></pre></td></tr></table></figure><ol><li>cookie 使用  如有需要可以访问 <a href="https://www.cnblogs.com/andy-zhou/p/5360107.html#_caption_6" target="_blank" rel="noopener">cookie详细使用方法</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expires: 设置cookie 过期时间</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let userName = &apos;Tomr&apos;;</span><br><span class="line">let age = 20;</span><br><span class="line"></span><br><span class="line">创建,修改 cookie</span><br><span class="line">document.cookie = `name=$&#123;userName&#125;`;</span><br><span class="line">document.cookie = `age=$&#123;age&#125;`;</span><br><span class="line"></span><br><span class="line">读取 cookie (返回字符串格式数据)</span><br><span class="line">let x = document.cookie  //  userName=Tomr;age=20</span><br><span class="line"></span><br><span class="line">删除 cookie</span><br><span class="line">document.cookie = `age=;expires=$&#123;new Date(0)&#125;`</span><br></pre></td></tr></table></figure><ol start="2"><li>sessionStorage, localStorage 使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage 在页面或浏览器关闭后会被清除</span><br><span class="line">localStorage 除非手动清除，否则会一直存在客户端</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">let userName = &apos;Tomr&apos;;</span><br><span class="line">创建,修改</span><br><span class="line">sessionStorage.setItem(&apos;name&apos;, userName);</span><br><span class="line">localStorage.setItem(&apos;name&apos;, userName);</span><br><span class="line"></span><br><span class="line">读取</span><br><span class="line">sessionStorage.getItem(&apos;name&apos;);</span><br><span class="line">localStorage.getItem(&apos;name&apos;);</span><br><span class="line"></span><br><span class="line">删除</span><br><span class="line">sessionStorage.removeItem(&apos;name&apos;);</span><br><span class="line">localStorage.removeItem(&apos;name&apos;);</span><br><span class="line"></span><br><span class="line">删除所有</span><br><span class="line">sessionStorage.clear();</span><br><span class="line">localStorage.clear();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//   通过 sessionStorage 来保存并设置滚动条的位置</span><br><span class="line"></span><br><span class="line">window.onscroll = () =&gt; &#123;</span><br><span class="line">    sessionStorage.setItem(&apos;offsetTop&apos;, document.documentElement.scrollTop) 或者  // document.documentElement.scrollTop获取滚动条高度</span><br><span class="line">    sessionStorage.setItem(&apos;offsetTop&apos;, window.pageYOffset)  // window.pageYOffset也可以获取滚动条高度</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">window.onload = () =&gt; &#123;</span><br><span class="line">    let _offset = sessionStorage.getItem(&apos;offsetTop&apos;)</span><br><span class="line">    document.documentElement.scrollTop = _offset</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/Ajax%20%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/javascript%E7%AC%94%E8%AE%B0/Ajax%20%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="Ajax-注意事项"><a href="#Ajax-注意事项" class="headerlink" title="Ajax 注意事项"></a>Ajax 注意事项</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function ajax () &#123;</span><br><span class="line">   return new promise((resolve, reject) =&gt; &#123;</span><br><span class="line">       var xhr = new XMLHttpRequest()   //  创建异步请求</span><br><span class="line">       xhr.onreadystatechange = function () &#123;</span><br><span class="line">           if (this.readyState === 4) &#123;</span><br><span class="line">               if (this.status === 200) &#123;</span><br><span class="line">                   resolve(xhr)</span><br><span class="line">               &#125; else &#123;</span><br><span class="line">                   reject(xhr)</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       xhr.open(type, url, true)   //</span><br><span class="line">       xhr.setRequestHeader(&apos;token&apos;, localStorage.getItem(&apos;USER_TOKEN&apos;)) </span><br><span class="line">       // setRequestHeader 可以设置自定义请求头部消息</span><br><span class="line">       // setRequestHeader 必须写在 open() 后面 send() 前面 </span><br><span class="line">       if (type === &apos;get&apos;) xhr.send(null) // 当请求为 get请求时 不需要上传数据体 所以send(null)</span><br><span class="line">       if (type === &apos;post&apos;) &#123;</span><br><span class="line">           xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded&apos;) // post需设置请求头部消息类型</span><br><span class="line">           xhr.send(JSON.stringify(data))</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ajax(&apos;get&apos;, &apos;/api/feedback?currentPage=1&amp;count=123&apos;).then(() =&gt; &#123;&#125;).catch(() =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/%E5%8D%9A%E5%AE%A2/hexo+github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/%E5%8D%9A%E5%AE%A2/hexo+github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h1 id="Hexo-gitHub-搭建属于自己的博客"><a href="#Hexo-gitHub-搭建属于自己的博客" class="headerlink" title="Hexo + gitHub 搭建属于自己的博客"></a>Hexo + gitHub 搭建属于自己的博客</h1><h3 id="1、-搭建之前先检查需要的东西：-node-git"><a href="#1、-搭建之前先检查需要的东西：-node-git" class="headerlink" title="1、 搭建之前先检查需要的东西： node git"></a>1、 搭建之前先检查需要的东西： node git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> windown键 + R 再输入 cmd 弹出命令行框检查 node (npm 是node顺带的)  git是否装好</span><br><span class="line">如果没有的话就先安装对应版本</span><br></pre></td></tr></table></figure><p>node: 地址： <a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a><br>git: <a href="https://git-scm.com/" target="_blank" rel="noopener">https://git-scm.com/</a><br><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/FB624672F1FE4D20826B0D472A930E24/1372" alt="image"></p><h3 id="2、安装Hexo"><a href="#2、安装Hexo" class="headerlink" title="2、安装Hexo"></a>2、安装Hexo</h3><blockquote><p>新建文件夹 Hexo, 然后在文件夹内鼠标右击，点击 git Bash, 输入命令行 npm install hexo -g,安装全局 hexo </p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/57B75906D91F445BAB81EE60A3F582BC/1373" alt="image"></p><blockquote><p>再hexo init 初始化</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/37BCC797D9254D6183FBAE013107E76C/1398" alt="image"></p><blockquote><p>npm install 安装所需要的插件</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/57419CE5E6D04FBA975C5DBE5264A848/1410" alt="image"></p><blockquote><p>安装依赖成功后依次输入 hexo g(生成静态html文件) hexo s(开启本地服务) （hexo d 是上传本地文件）</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/E6E133E447F748399FB6619B85A5C266/1420" alt="image"></p><blockquote><p>如果打开本地服务端口 4000 说明博客已经搭好了，只需要上传到服务器就好了</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/0DD753CDECE94659861A1E94E8FB2B61/1422" alt="image"></p><blockquote><p>上传之前要先安装一个扩展： npm install hexo-deployer-git –save (hexo d 必须安装这个扩展不然会报错) 本地环境搭好，现在配置github相关</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/7070C9D9CA564E2EB8A606BB6E29575A/1439" alt="image"></p><h3 id="3、将本地博客和github关联起来"><a href="#3、将本地博客和github关联起来" class="headerlink" title="3、将本地博客和github关联起来"></a>3、将本地博客和github关联起来</h3><blockquote><p>将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/9CC82CD779BA4AB8A40371A3104160A2/1452" alt="image"></p><blockquote><p>输入 cd ~/.ssh  检查ssh秘钥 ls</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/805DA979A5B3438CB180F053FC88CB16/1451" alt="image"></p><blockquote><p> 输入 ssh-keygen -t rsa -C “<a href="mailto:718253460@qq.com" target="_blank" rel="noopener">718253460@qq.com</a>“ 生成秘钥。连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:/Users/Administrator/.ssh）</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/82E5A5B01E7044599105524DDDD1FBF5/1474" alt="image"></p><blockquote><p>输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/64C777BB67BE4599BE66854D8DFB287E/1473" alt="image"></p><blockquote><p>再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/A55E67598D03429FBCE06B1A5725181C/1475" alt="image"></p><blockquote><p> 登录Github，点击头像下的settings，添加ssh</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/9D968F4A026A4527B55B0A1C3E980628/1493" alt="image"></p><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/F74BC1092F294AD6A137D8BDCD21465D/1492" alt="image"></p><blockquote><p>新建一个new ssh key，将id_rsa.pub (C:/Users/Administrator/.ssh) 文件里的内容复制上去</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/0C17A30C36FA4E1A951453BC5429620F/1491" alt="image"></p><blockquote><p>输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/81210B1D4085476CA2B68CB1EE20A2D7/1490" alt="image"></p><h3 id="4、创建github-项目"><a href="#4、创建github-项目" class="headerlink" title="4、创建github 项目"></a>4、创建github 项目</h3><blockquote><p>Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/2DAE42D9CB8641E2A3BA5C31EB10C918/1516" alt="image"></p><blockquote><p>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它 ( 如果没有网址的话就点击下面按钮切换到 master branch 然后在 save保存 刷新一下 )</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/ECDE26ACEEBB4EE0806C2C61ED1A928C/1517" alt="image"></p><h3 id="5、配置Deployment，在其文件夹中，找到-config-yml文件-底部的deploy"><a href="#5、配置Deployment，在其文件夹中，找到-config-yml文件-底部的deploy" class="headerlink" title="5、配置Deployment，在其文件夹中，找到_config.yml文件, 底部的deploy"></a>5、配置Deployment，在其文件夹中，找到_config.yml文件, 底部的deploy</h3><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/117FCE8A8E4542B5AA4FFD290EB3C828/1519" alt="image"></p><blockquote><p>repository值是: 你的github项目里的ssh （地址）</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/D44EEA4DAF61420CA2C5BAE3B7B43985/1542" alt="image"></p><blockquote><p>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/EDC85BC069564F78AA8496827A6FBBA9/1555" alt="image"></p><blockquote><p>部署成功后访问你的地址：http://用户名.github.io。那么将看到生成的文章</p></blockquote><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/995E555207BB4871872F65FFFDAA5A54/1552" alt="image"></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/axios/axios%20post%E4%BC%A0%E5%8F%82/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/axios/axios%20post%E4%BC%A0%E5%8F%82/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="axios-post传参-后端接收不到数据"><a href="#axios-post传参-后端接收不到数据" class="headerlink" title="axios post传参 后端接收不到数据"></a>axios post传参 后端接收不到数据</h1></blockquote><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><p><strong>在main.js里设置配置，修改Content-Type</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">axios.defaults.headers.post[&apos;Content-type&apos;] = &apos;application/x-www-form-urlencoded&apos;</span><br><span class="line">&lt;!--全局设置 axios--&gt;</span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure></p><p><strong>在vue组件中</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let url = url</span><br><span class="line">let params = new URLSearchParams()</span><br><span class="line">params.append(key, value)</span><br><span class="line">...</span><br><span class="line">this.$axios.post(url, params)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">        console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在命令行执行 npm i qs -S</p><p><strong>在main.js里设置配置</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import qs from &apos;qs&apos;</span><br><span class="line">Vue.prototype.$qs = qs</span><br><span class="line">Vue.prototype.$axios = axios</span><br></pre></td></tr></table></figure></p><p><strong>在组件中</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let postData = this.$qs.string(&#123;</span><br><span class="line">    key: value</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line">this.$axios.post(&apos;http://m.jubao520.com/app/index/login&apos;, postData)</span><br><span class="line">    .then(res =&gt; &#123;</span><br><span class="line">      console.log(res)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">      console.log(err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">两种方法都是将请求主体转换为类似 appphone=15839595305&amp;apppassword=110 这种格式上传</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/element/keyup.enter/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/element/keyup.enter/</url>
      <content type="html"><![CDATA[<blockquote><h2 id="监听input回车"><a href="#监听input回车" class="headerlink" title="监听input回车"></a>监听input回车</h2></blockquote><p>添加.native修饰符可以触发回车事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-input @keyup.enter.native=&quot;login&quot;&gt;&lt;/el-input&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/element/vue%20element/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/element/vue%20element/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="vue-element使用注意事项"><a href="#vue-element使用注意事项" class="headerlink" title="vue element使用注意事项"></a>vue element使用注意事项</h1></blockquote><h3 id="详情：做列表搜索的时候当表单只有单个输入框时，回车会自动提交表单"><a href="#详情：做列表搜索的时候当表单只有单个输入框时，回车会自动提交表单" class="headerlink" title="详情：做列表搜索的时候当表单只有单个输入框时，回车会自动提交表单 :"></a>详情：做列表搜索的时候当表单只有单个输入框时，回车会自动提交表单 :</h3><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/6B9039FB6BAC47F3AE7B177C88C146F6/233" alt="image"><br><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/0DB69C41F5274F9589D8119430F88C07/236" alt="image"></p><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/03FF100E26D94D4198CA3893BCA32E77/234" alt="image"></p><h3 id="在-el-form-上加入-submit-native-parent-阻止表单提交-代码如下："><a href="#在-el-form-上加入-submit-native-parent-阻止表单提交-代码如下：" class="headerlink" title="在 el-form 上加入 @submit.native.parent,阻止表单提交 代码如下："></a>在 el-form 上加入 @submit.native.parent,阻止表单提交 代码如下：</h3><p><img src="https://note.youdao.com/yws/public/resource/a7da79605f748a47ba547693895cb8ee/xmlnote/3058E88D9E7442849042D2EBB2BB0AED/299" alt="image"></p><h3 id="当出现多个-el-input的情况下就不会出现这样的bug"><a href="#当出现多个-el-input的情况下就不会出现这样的bug" class="headerlink" title="当出现多个 el-input的情况下就不会出现这样的bug"></a>当出现多个 el-input的情况下就不会出现这样的bug</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E5%B0%8Fbug/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/%E6%97%A0%E9%99%90%E6%BB%9A%E5%8A%A8%E5%B0%8Fbug/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="minit-ui-无限滚动不加载"><a href="#minit-ui-无限滚动不加载" class="headerlink" title="minit-ui 无限滚动不加载"></a>minit-ui 无限滚动不加载</h1></blockquote><blockquote><p>当滚动事件不加载的时候 给父元素设置 <strong><em>overflow:hidden</em></strong></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/vue%20%20keep-alive%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/vue%E7%AC%94%E8%AE%B0/vue%20%20keep-alive%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</url>
      <content type="html"><![CDATA[<h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><p>允许组件有条件的缓存</p><blockquote><!--逗号分隔字符串--></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;a,b&quot;&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;  </span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><blockquote><!--正则表达式 (使用 `v-bind`)--></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive v-bind:include=&quot;/a|b/&quot;&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;  </span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><blockquote><!--数组 (使用 `v-bind`)--></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive v-bind:include=&quot;[&apos;a&apos;, &apos;b&apos;]&quot;&gt;</span><br><span class="line">  &lt;component :is=&quot;view&quot;&gt;&lt;/component&gt;  </span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/javascript%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/06/22/%E6%88%91%E7%9A%84%E8%B5%84%E6%BA%90/%E6%AF%8F%E6%97%A5%E7%AC%94%E8%AE%B0/javascript%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="什么是垃圾回收机制？"><a href="#什么是垃圾回收机制？" class="headerlink" title="什么是垃圾回收机制？"></a>什么是垃圾回收机制？</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">垃圾回收简单来说就是 浏览器会按照固定的时间间隔周期性的清除不再使用的变量</span><br></pre></td></tr></table></figure><blockquote><h1 id="什么是栈、堆"><a href="#什么是栈、堆" class="headerlink" title="什么是栈、堆?"></a>什么是栈、堆?</h1></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">栈： 先进后出；</span><br><span class="line">堆： 先进先出；</span><br><span class="line">基础类型保存在栈内存中,先进后出</span><br><span class="line">引用类型保存在堆内存中</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/20/mks/"/>
      <url>/2018/06/20/mks/</url>
      <content type="html"><![CDATA[<blockquote><h1 id="mackdown-md"><a href="#mackdown-md" class="headerlink" title="mackdown.md"></a>mackdown.md</h1></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>My New Post</title>
      <link href="/2018/06/14/My-New-Post/"/>
      <url>/2018/06/14/My-New-Post/</url>
      <content type="html"><![CDATA[<h1 id="我的hexo博客！！！！！！！！"><a href="#我的hexo博客！！！！！！！！" class="headerlink" title="我的hexo博客！！！！！！！！"></a>我的hexo博客！！！！！！！！</h1>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/14/hello-world/"/>
      <url>/2018/06/14/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
